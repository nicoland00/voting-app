"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.anchorTemplateGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const web3_js_1 = require("@solana/web3.js");
const path = require("path");
function anchorTemplateGenerator(tree_1, options_1) {
    return tslib_1.__awaiter(this, arguments, void 0, function* (tree, options, keypair = web3_js_1.Keypair.generate()) {
        var _a;
        const variants = (0, devkit_1.names)(options.name);
        const substitutions = Object.assign(Object.assign({ publicKey: keypair.publicKey.toString(), projectName: options.projectName }, variants), { upperCaseName: variants.fileName.toUpperCase().replace(/-/g, '_') });
        (0, devkit_1.generateFiles)(tree, path.join(__dirname, 'files', options.template), options.directory, Object.assign(Object.assign(Object.assign({}, options), substitutions), { fileNameUnderscore: substitutions.fileName.replace(/-/g, '_') }));
        if (options.template !== 'base') {
            tree.write(`${options.directory}/target/deploy/${substitutions.fileName.replace(/-/g, '_')}-keypair.json`, `[${keypair.secretKey.join(',')}]`);
        }
        if (!options.skipUpdateIndexTs) {
            const indexExport = `export * from './${substitutions.fileName}-exports'`;
            const indexTsPath = path.join(options.directory, 'src', 'index.ts');
            const content = ((_a = tree.read(indexTsPath)) === null || _a === void 0 ? void 0 : _a.toString()) || '';
            tree.write(indexTsPath, content + '\n' + indexExport + '\n');
        }
    });
}
exports.anchorTemplateGenerator = anchorTemplateGenerator;
exports.default = anchorTemplateGenerator;
//# sourceMappingURL=anchor-template-generator.js.map