"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.anchorApplicationGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const js_1 = require("@nx/js");
const preset_common_1 = require("@solana-developers/preset-common");
const path_1 = require("path");
const utils_1 = require("../../utils");
const anchor_template_generator_1 = require("../anchor-template/anchor-template-generator");
function anchorApplicationGenerator(tree, rawOptions, keypair) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        var _a;
        const options = (0, utils_1.anchorApplicationNormalizeSchema)(rawOptions);
        yield (0, js_1.libraryGenerator)(tree, {
            directory: options.name,
            projectNameAndRootFormat: 'as-provided',
            name: options.name,
            bundler: 'rollup',
            unitTestRunner: 'jest',
            skipFormat: true,
            linter: 'eslint',
        });
        const project = (0, devkit_1.getProjects)(tree).get(options.name);
        (0, preset_common_1.applicationCleanup)(tree, (0, path_1.join)(project.sourceRoot));
        (0, devkit_1.updateJson)(tree, (0, path_1.join)(project.root, 'project.json'), (json) => {
            json.targets = Object.assign(Object.assign({}, json.targets), { anchor: (0, preset_common_1.runCommand)(project.root, 'anchor'), localnet: (0, preset_common_1.runCommand)(project.root, 'anchor localnet'), jest: json.targets.test, test: (0, preset_common_1.runCommand)(project.root, 'anchor test') });
            return json;
        });
        (0, devkit_1.updateJson)(tree, (0, path_1.join)(project.root, 'tsconfig.lib.json'), (json) => {
            json.compilerOptions = Object.assign(Object.assign({}, json.compilerOptions), { resolveJsonModule: true, allowSyntheticDefaultImports: true });
            return json;
        });
        yield (0, anchor_template_generator_1.default)(tree, {
            projectName: options.name,
            name: 'base',
            template: 'base',
            directory: project.root,
            skipUpdateIndexTs: true,
        });
        if (options.template !== 'none') {
            yield (0, anchor_template_generator_1.default)(tree, {
                projectName: options.name,
                name: (_a = options.programName) !== null && _a !== void 0 ? _a : options.template,
                template: options.template,
                directory: project.root,
            }, keypair);
        }
        (0, utils_1.anchorApplicationDependencies)(tree, project);
        (0, utils_1.anchorApplicationIgnoreFiles)(tree, project.sourceRoot.replace('/src', ''));
        if (!options.skipFormat) {
            yield (0, devkit_1.formatFiles)(tree);
        }
    });
}
exports.anchorApplicationGenerator = anchorApplicationGenerator;
exports.default = anchorApplicationGenerator;
//# sourceMappingURL=anchor-application-generator.js.map