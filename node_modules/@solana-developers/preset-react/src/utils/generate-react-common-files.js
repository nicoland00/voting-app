"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateReactCommonFiles = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const preset_common_1 = require("@solana-developers/preset-common");
const react_application_run_scripts_1 = require("./react-application-run-scripts");
function generateReactCommonFiles(tree, options, npmScope) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        (0, devkit_1.updateJson)(tree, 'package.json', (json) => {
            json.scripts = Object.assign(Object.assign({}, json.scripts), (0, react_application_run_scripts_1.reactApplicationRunScripts)({
                anchor: options.anchor,
                anchorName: options.anchorName,
                webName: options.webName,
            }));
            return json;
        });
        if (!tree.exists('README.md')) {
            // Generate the readme files
            yield (0, preset_common_1.commonTemplateGenerator)(tree, {
                name: options.webName,
                npmScope,
                template: 'readme',
                anchor: options.anchor,
                anchorName: options.anchorName,
                webName: options.webName,
                directory: '.',
            });
        }
        if (!tree.exists('LICENSE') && !tree.exists('LICENSE.md')) {
            // Generate the license files
            yield (0, preset_common_1.commonTemplateGenerator)(tree, {
                name: options.webName,
                npmScope,
                template: 'license',
                anchor: options.anchor,
                anchorName: options.anchorName,
                webName: options.webName,
                directory: '.',
            });
        }
        // Format the files.
        if (!options.skipFormat) {
            yield (0, devkit_1.formatFiles)(tree);
        }
    });
}
exports.generateReactCommonFiles = generateReactCommonFiles;
//# sourceMappingURL=generate-react-common-files.js.map