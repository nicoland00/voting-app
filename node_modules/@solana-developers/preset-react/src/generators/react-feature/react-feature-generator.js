"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reactFeatureGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const get_npm_scope_1 = require("@nx/js/src/utils/package-json/get-npm-scope");
const preset_anchor_1 = require("@solana-developers/preset-anchor");
const preset_common_1 = require("@solana-developers/preset-common");
const path_1 = require("path");
const utils_1 = require("../../utils");
function reactFeatureGenerator(tree, options, keypair) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const npmScope = (0, get_npm_scope_1.getNpmScope)(tree);
        const projects = (0, devkit_1.getProjects)(tree);
        const anchorProject = projects.get(options.anchorName);
        const webProject = projects.get(options.webName);
        if (!anchorProject) {
            throw new Error(`Could not find anchor project: ${options.anchorName}`);
        }
        if (!webProject) {
            throw new Error(`Could not find web project: ${options.webName}`);
        }
        const preset = (0, utils_1.getReactPreset)(tree, webProject.sourceRoot);
        const anchorTemplate = getTemplateName(options.feature);
        if (anchorTemplate === 'none') {
            throw new Error(`Could not find anchor template for feature: ${options.feature}`);
        }
        const substitutions = (0, preset_common_1.genericSubstitutions)(Object.assign(Object.assign({}, options), { anchorName: options.anchorName, anchorProgram: options.name, anchor: anchorTemplate, preset,
            npmScope }));
        yield (0, preset_anchor_1.anchorTemplateGenerator)(tree, {
            projectName: options.anchorName,
            name: substitutions.anchorProgram.fileName,
            template: anchorTemplate,
            directory: anchorProject.root,
        }, keypair);
        // We don't need to create the React code if the UI is set to none
        if (options.ui === 'none') {
            return;
        }
        const source = (0, path_1.join)(__dirname, 'files', options.feature);
        const target = preset === 'react'
            ? (0, path_1.join)(webProject.root, 'src', 'app', substitutions.fileName)
            : (0, path_1.join)(webProject.root, 'components', substitutions.fileName);
        (0, devkit_1.generateFiles)(tree, source, target, Object.assign(Object.assign({}, options), substitutions));
        const path = substitutions.anchorProgram.fileName;
        const label = substitutions.anchorProgram.className;
        const routesFile = (0, path_1.join)(webProject.sourceRoot, 'app', getRouteFile(preset));
        if (!tree.exists(routesFile)) {
            console.warn(`Could not find routes file: ${routesFile}`);
            return;
        }
        // Add the navigation link
        (0, preset_common_1.updateSourceFile)(tree, routesFile, (source) => {
            (0, preset_common_1.addArrayItem)(source, { name: 'links', content: `{ label: '${label} Program', path: '/${path}' },` });
            return source;
        });
        if (preset === 'next') {
            const route = (0, path_1.join)(webProject.root, 'app', path, 'page.tsx');
            // Add Next Route and Link
            tree.write(route, `import ${label}Feature from '@/components/${path}/${path}-feature';

export default function Page() {
  return <${label}Feature />;
}
`);
        }
        // Add the lazy import
        if (preset === 'react') {
            const lazyImport = `const ${label}Feature = lazy(() => import('./${path}/${path}-feature'))`;
            (0, preset_common_1.updateSourceFile)(tree, routesFile, (source) => {
                // Add the lazy import before the links array
                source.insertText((0, preset_common_1.getArrayItem)(source, 'links').getStartLinePos(), `${lazyImport}\n`);
                // Add the route
                (0, preset_common_1.addArrayItem)(source, { name: 'routes', content: `{ path: '${path}/*', element: <${label}Feature /> },` });
                return source;
            });
        }
    });
}
exports.reactFeatureGenerator = reactFeatureGenerator;
function getRouteFile(preset) {
    switch (preset) {
        case 'react':
            return 'app-routes.tsx';
        case 'next':
            return 'layout.tsx';
        default:
            throw new Error(`Unknown preset: ${preset}`);
    }
}
exports.default = reactFeatureGenerator;
function getTemplateName(feature) {
    switch (feature) {
        case 'anchor-counter':
            return 'counter';
        case 'anchor-basic':
            return 'basic';
        default:
            throw new Error(`Unknown feature: ${feature}`);
    }
}
//# sourceMappingURL=react-feature-generator.js.map