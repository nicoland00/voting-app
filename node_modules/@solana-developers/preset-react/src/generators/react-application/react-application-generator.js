"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reactApplicationGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const get_npm_scope_1 = require("@nx/js/src/utils/package-json/get-npm-scope");
const preset_common_1 = require("@solana-developers/preset-common");
const path_1 = require("path");
const utils_1 = require("../../utils");
const react_template_generator_1 = require("../react-template/react-template-generator");
function reactApplicationGenerator(tree, rawOptions, keypair) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const options = (0, utils_1.normalizeReactApplicationSchema)(rawOptions);
        const npmScope = (0, get_npm_scope_1.getNpmScope)(tree);
        // Set up the base project.
        const project = yield (0, utils_1.generateReactApplication)(tree, options);
        // Clean up the default project files.
        (0, preset_common_1.applicationCleanup)(tree, (0, path_1.join)(project.sourceRoot, 'app'));
        // Generate the base files from the templates.
        yield (0, react_template_generator_1.reactTemplateGenerator)(tree, {
            name: options.webName,
            npmScope,
            template: 'base',
            anchor: options.anchor,
            anchorName: options.anchorName,
            anchorProgram: options.anchorProgram,
            webName: options.webName,
            directory: project.root,
        });
        // Generate the ui files from the templates.
        yield (0, react_template_generator_1.reactTemplateGenerator)(tree, {
            name: options.webName,
            npmScope,
            template: options.ui,
            anchor: options.anchor,
            anchorName: options.anchorName,
            anchorProgram: options.anchorProgram,
            webName: options.webName,
            directory: project.root,
        });
        // Generate the solana-provider from the templates.
        yield (0, react_template_generator_1.reactTemplateGenerator)(tree, {
            name: options.webName,
            npmScope,
            template: 'solana-provider',
            anchor: options.anchor,
            anchorName: options.anchorName,
            anchorProgram: options.anchorProgram,
            webName: options.webName,
            directory: (0, path_1.join)(project.root, 'src', 'app', 'solana'),
        });
        // Add the dependencies for the base application.
        (0, utils_1.reactApplicationDependencies)(tree, options, 'react');
        // Add the dependencies for the wallet adapter.
        (0, utils_1.walletAdapterDependencies)(tree);
        // Add the tailwind config.
        yield (0, utils_1.reactApplicationUiConfig)(tree, options);
        // Set up the anchor feature.
        yield (0, utils_1.setupAnchorReactFeature)(tree, options, keypair);
        // Generate the common files.
        yield (0, utils_1.generateReactCommonFiles)(tree, options, npmScope);
        // Install the packages on exit.
        return () => {
            (0, devkit_1.installPackagesTask)(tree, true);
        };
    });
}
exports.reactApplicationGenerator = reactApplicationGenerator;
exports.default = reactApplicationGenerator;
//# sourceMappingURL=react-application-generator.js.map