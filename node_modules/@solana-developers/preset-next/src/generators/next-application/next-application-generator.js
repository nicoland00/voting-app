"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nextApplicationGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const get_npm_scope_1 = require("@nx/js/src/utils/package-json/get-npm-scope");
const preset_common_1 = require("@solana-developers/preset-common");
const preset_react_1 = require("@solana-developers/preset-react");
const path_1 = require("path");
const utils_1 = require("../../utils");
const next_template_generator_1 = require("../next-template/next-template-generator");
function nextApplicationGenerator(tree, rawOptions, keypair) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const options = (0, utils_1.normalizeNextApplicationSchema)(rawOptions);
        const project = yield (0, utils_1.generateNextApplication)(tree, options);
        const npmScope = (0, get_npm_scope_1.getNpmScope)(tree);
        // Clean up the default project files.
        const cleanup = [
            '/app/global.css',
            '/app/page.module.css',
            '/app/layout.tsx',
            '/app/page.tsx',
            '/public/favicon.ico',
            '/public/.gitkeep',
        ];
        (0, preset_common_1.applicationCleanup)(tree, (0, path_1.join)(project.sourceRoot, 'app'), cleanup);
        // Generate the base files from the templates.
        yield (0, next_template_generator_1.default)(tree, {
            name: options.webName,
            npmScope,
            template: 'base',
            anchor: options.anchor,
            anchorName: options.anchorName,
            anchorProgram: options.anchorProgram,
            webName: options.webName,
            directory: project.sourceRoot,
        });
        // Generate the component files from the React template.
        const components = (0, path_1.join)(project.sourceRoot, 'components');
        yield (0, preset_react_1.reactTemplateGenerator)(tree, {
            name: options.webName,
            npmScope,
            template: options.ui,
            anchor: options.anchor,
            anchorName: options.anchorName,
            anchorProgram: options.anchorProgram,
            webName: options.webName,
            directory: components,
            preset: 'next',
        }, 'src/app/');
        // Delete react app and routes.
        tree.delete(`${components}/app.tsx`);
        tree.delete(`${components}/app-routes.tsx`);
        // Generate the ui files from the templates.
        yield (0, next_template_generator_1.default)(tree, {
            name: options.webName,
            npmScope,
            template: options.ui,
            anchor: options.anchor,
            anchorName: options.anchorName,
            anchorProgram: options.anchorProgram,
            webName: options.webName,
            directory: project.sourceRoot,
        });
        // Generate the solana-provider from the templates.
        yield (0, preset_react_1.reactTemplateGenerator)(tree, {
            name: options.webName,
            npmScope,
            template: 'solana-provider',
            anchor: options.anchor,
            anchorName: options.anchorName,
            anchorProgram: options.anchorProgram,
            webName: options.webName,
            directory: (0, path_1.join)(components, 'solana'),
            preset: 'next',
        });
        // Add the dependencies for the base application.
        (0, preset_react_1.reactApplicationDependencies)(tree, options, 'next');
        // Add the dependencies for the wallet adapter.
        (0, preset_react_1.walletAdapterDependencies)(tree);
        // Add the ui config.
        yield (0, preset_react_1.reactApplicationUiConfig)(tree, options);
        // Set up the anchor feature.
        yield (0, preset_react_1.setupAnchorReactFeature)(tree, options, keypair);
        // Patch node-gyp-build error
        const nextConfigPath = (0, path_1.join)(project.root, 'next.config.js');
        const nextConfig = tree.read(nextConfigPath, 'utf-8');
        const needle = 'const nextConfig = {';
        const snippet = `webpack: (config) => {
    config.externals = [ ...(config.externals || []), 'bigint', 'node-gyp-build'];
    return config;
  },`;
        tree.write(nextConfigPath, nextConfig.replace(needle, `${needle}\n${snippet}`));
        // Make sure to add these types to the tsconfig.json include array
        const nextTypes = '.next/types/**/*.ts';
        (0, devkit_1.updateJson)(tree, (0, path_1.join)(project.root, 'tsconfig.json'), (json) => {
            json.include = json.include || [];
            if (!json.include.includes(nextTypes)) {
                json.include.push(nextTypes);
            }
            else {
                console.warn(`"${nextTypes}" already exists in the tsconfig.json include array, this can be removed from the generator.`);
            }
            return json;
        });
        // Generate the common files.
        yield (0, preset_react_1.generateReactCommonFiles)(tree, options, npmScope);
        // Install the packages on exit.
        return () => {
            (0, devkit_1.installPackagesTask)(tree, true);
        };
    });
}
exports.nextApplicationGenerator = nextApplicationGenerator;
exports.default = nextApplicationGenerator;
//# sourceMappingURL=next-application-generator.js.map