"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatOutput = exports.getRecursiveFileContents = void 0;
const binaries = [
    'asset',
    'cginc',
    'dwlt',
    'eot',
    'gif',
    'ico',
    'jpeg',
    'jpg',
    'mat',
    'meta',
    'pdf',
    'png',
    'prefab',
    'shader',
    'svg',
    'ttf',
    'woff',
    'woff2',
    'lock',
];
function getRecursiveFileContents(tree, path, includeBinaries = false) {
    const contents = {};
    const dir = tree.children(path);
    dir.forEach((file) => {
        if (tree.isFile(`${path}/${file}`)) {
            const isBinary = binaries.includes(file.split('.').pop());
            const content = tree.read(`${path}/${file}`);
            const binaryContent = includeBinaries ? content.toString('base64') : null;
            contents[file] = {
                path: `${path}/${file}`,
                isBinary,
                content: isBinary ? binaryContent : formatOutput(content.toString('utf-8')),
            };
        }
        else {
            contents[file] = {
                path: `${path}/${file}`,
                children: getRecursiveFileContents(tree, `${path}/${file}`, includeBinaries),
            };
        }
    });
    return contents;
}
exports.getRecursiveFileContents = getRecursiveFileContents;
function formatOutput(value) {
    return value
        .split('\n')
        .map((line) => line.trim())
        .filter((line) => line.length > 0);
}
exports.formatOutput = formatOutput;
//# sourceMappingURL=get-recursive-file-contents.js.map